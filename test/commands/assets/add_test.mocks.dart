// Mocks generated by Mockito 5.0.17 from annotations
// in lighthouse/test/commands/assets/add_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:io' as _i4;

import 'package:lighthouse/src/file_manager.dart' as _i2;
import 'package:lighthouse/src/pubspec_manager.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FilesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilesManager extends _i1.Mock implements _i2.FilesManager {
  MockFilesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> findInnerContent(_i4.FileSystemEntity? fse) =>
      (super.noSuchMethod(Invocation.method(#findInnerContent, [fse]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
  @override
  _i3.Future<List<String>> removeUnNecessaryChildren(List<String>? list) =>
      (super.noSuchMethod(Invocation.method(#removeUnNecessaryChildren, [list]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
}

/// A class which mocks [PubSpecManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPubSpecManager extends _i1.Mock implements _i5.PubSpecManager {
  MockPubSpecManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> setAssets(Iterable<String>? assetsBefore, _i4.File? file) =>
      (super.noSuchMethod(Invocation.method(#setAssets, [assetsBefore, file]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  Iterable<String> formatPaths(Iterable<String>? list) =>
      (super.noSuchMethod(Invocation.method(#formatPaths, [list]),
          returnValue: <String>[]) as Iterable<String>);
}
