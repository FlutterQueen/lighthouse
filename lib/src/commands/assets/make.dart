import 'dart:io';

import 'package:args/command_runner.dart';
import 'package:df_builder/df_builder.dart';
import 'package:lighthouse/src/helpers/file.dart';
import 'package:lighthouse/src/helpers/pubspec.dart';
import 'package:lighthouse/src/helpers/yaml.dart';
import 'package:recase/recase.dart';

final _yamlAssets = <String>[];

class AssetsMakeCommand extends Command {
  @override
  String get description => 'make assets class => Assets';

  @override
  String get name => 'assets:make';

  @override
  Future<void> run() async {
    /// load yaml assets

    _yamlAssets.addAll(getYamlAssets());

    /// assets.dart
    final dfBuilder = DartFileBuilder(
      topComments: [
        '/// ! This File is Generated by LH DO NOT EDIT ðŸ‘‘',
        '/// ! TO RE GENERATE THIS FILE USE `lh tr:make` ðŸ‘‘',
      ],
    );

    final assetsClassBuilder = ClassBuilder(
      name: 'assets',
      getters: await buildClassGetters(
        dfBuilder: dfBuilder,
        path: 'assets',
        useStaticGetter: true,
      ),
    );
    dfBuilder.addClass(assetsClassBuilder);

    /// generated files
    if (!Directory('./lib/generated').existsSync()) {
      await Directory('./lib/generated').create();
    }
    final genFile = File('./lib/generated/assets.dart');
    if (await genFile.exists()) await genFile.delete();
    await genFile.writeAsString(dfBuilder.toString());
  }
}

Future<List<ClassGetter>> buildClassGetters({
  required DartFileBuilder dfBuilder,
  required String path,
  bool useStaticGetter = false,
}) async {
  final children = await loadDirectoryFiles(path);
  final getters = <ClassGetter>[];
  for (final child in children) {
    if (child is File) {
      getters.add(ClassGetter(
        comments: findFSTypeComment(child.path),
        type: 'String',
        name: findNameWithoutFormat(child.path),
        whatToReturn: '\'${child.path.replaceAll('\\', '/')}\'',
        isStatic: useStaticGetter,
      ));
    } else {
      /// it is a directory
      /// build the interface
      dfBuilder.addClass(
        await buildInterface(
          dfBuilder: dfBuilder,
          path: child.path,
        ),
      );
      getters.add(
        ClassGetter(
          comments: findFSTypeComment(child.path),
          isStatic: useStaticGetter,
          name: findNameWithoutFormat(child.path),
          type: buildInterfaceName(child.path.pathCase.split('/').last),
          whatToReturn:
              "${buildInterfaceName(child.path.pathCase.split('/').last)}()",
        ),
      );
    }
  }
  return getters;
}

/// generate the interface name
String buildInterfaceName(String key) => '_${key.pascalCase}Interface';

Future<ClassBuilder> buildInterface({
  required String path,
  required DartFileBuilder dfBuilder,
}) async {
  final getters = await buildClassGetters(
    useStaticGetter: false,
    dfBuilder: dfBuilder,
    path: path,
  );

  return ClassBuilder(
    havePrivateConstructor: false,
    name: buildInterfaceName(path.pathCase.split('/').last),
    getters: getters,
  );
}

String findNameWithoutFormat(String path) {
  final name = findFileName(path).split('.').first;
  return name.camelCase;
}

/// return the comment bases on the file
/// adds a deprecated comment if the file is not in the yaml Assets
String findFSTypeComment(String child) {
  /// if is just a folder add this as comment
  if (!isFilePath(child)) return '/// * Directory';

  final fName = findFileName(child);

  /// *
  final result = findFileExtension(fName);

  String fComment = '/// * $result';

  /// * returns true if this file in the yaml assets
  final isInAssets = isInYamlAssets(child, _yamlAssets);

  return isInAssets
      ? fComment
      : '''$fComment
      @Deprecated('${child.replaceAll('\\', '/')} is not in your assets in pubspec.yaml')''';
}
